#include <GL/glut.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <iostream>
#include <vector>
#include <string>
#include <random>       // Assigning colors

#include "vector.h"
#include "Body.h"
#include "Star.h"
#include "Planet.h"
#include "Moon.h"
#include "BlackHole.h"
#include "FileReader.h"

using namespace std;

int main() {
    // Variables to store the number of different body types
    int numBodies = 0;
    int numStars = 0;
    int numPlanets = 0;
    int numMoons = 0;
    int numBlackHoles = 0;

    // Vector containers for each type of body
    vector<Vector> stars;
    vector<Vector> planets;
    vector<Vector> moons;
    vector<Vector> blackHoles;

    try {
        // Create a FileReader to read the output file generated by the simulation
        FileReader reader("bodies.txt");
        auto bodies = reader.readBodiesFromOutput();

        // Loop through each body and categorize them
        for (const auto& body : bodies) {
            if (body.type == "star") {
                stars.push_back(body.position);
                numStars++;
            } else if (body.type == "planet") {
                planets.push_back(body.position);
                numPlanets++;
            } else if (body.type == "moon") {
                moons.push_back(body.position);
                numMoons++;
            } else if (body.type == "blackhole") {
                blackHoles.push_back(body.position);
                numBlackHoles++;
            }
        }

        // Update the total number of bodies
        numBodies = bodies.size();

        // Output summary of the read data
        cout << "Number of bodies: " << numBodies << endl;
        cout << "Number of stars: " << numStars << endl;
        cout << "Number of planets: " << numPlanets << endl;
        cout << "Number of moons: " << numMoons << endl;
        cout << "Number of black holes: " << numBlackHoles << endl;

    } catch (const std::exception& e) {
        cerr << "Error: " << e.what() << endl;
    }

    return 0;
}
