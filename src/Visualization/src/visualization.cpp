#include <GL/glut.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <iostream>
#include <vector>
#include <string>
#include <random>       // Assigning colors

#include "vector.h"
#include "Body.h"
#include "Star.h"
#include "Planet.h"
#include "Moon.h"
#include "BlackHole.h"
#include "FileReader.h"

using namespace std;

/*
    g++ -std=c++11 -o vis visualization.cpp FileReader.cpp Body.cpp Star.cpp Planet.cpp 
        Moon.cpp BlackHole.cpp vector.cpp -framework OpenGL -framework GLUT
        -I/usr/local/include
*/

//for graphics dont worry ill ocmment more later
void display() {
    // Clear color and depth buffers
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    
    // Set camera view
    gluLookAt(0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

    // Render stars (for demonstration, you can add better rendering here)
    glColor3f(1.0, 1.0, 0.0); // Yellow color for stars
    glutSolidSphere(1.0, 20, 20); // Draw a small sphere representing a star
    glPopMatrix();
    

    // You can do similar rendering for planets, moons, and black holes here...

    glutSwapBuffers(); // Swap the buffers for smooth rendering
}
//graphics again dont worry
void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (double)w / (double)h, 1.0, 1000.0);
    glMatrixMode(GL_MODELVIEW);
} 

int main(int argc, char** argv) {
    // Vector containers for each type of body
    // int timestep;
    // vector<Vector> stars;
    // vector<Vector> planets;
    // vector<Vector> moons;
    // vector<Vector> blackHoles;

    try {
        // Create a FileReader to read the output file generated by the simulation
        FileReader reader(argv[1]);
        int timestep = reader.readTimeStep();
        auto [bodies, stars, planets, moons, blackholes] = reader.readBodies();

        // Output summary of the read data
        cout << "Timestep: " <<timestep<<endl;
        cout << "Number of bodies: " << bodies.size() << endl;
        cout << "Number of stars: " << stars.size() << endl;
        cout << "Number of planets: " << planets.size() << endl;
        cout << "Number of moons: " << moons.size() << endl;
        cout << "Number of black holes: " << blackholes.size() << endl;
    //graphics from here down
        glutInit(&argc,argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
        glutInitWindowSize(800, 600);
        glutCreateWindow("N-Body Simulation");
        glutReshapeFunc(reshape);    

        glutReshapeFunc(reshape);
        glutDisplayFunc(display); // Register display callback
        glutMainLoop();
        
    } catch (const std::exception& e) {
        cerr << "Error: " << e.what() << endl;
    }

    return 0;
}
